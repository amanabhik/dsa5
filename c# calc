1. Create a Windows Forms application that performs a calculation based on user input. Implement exception handling to handle the case where the input data is not valid, such as a negative number or a non-numeric value and display an error message in a Label control.

Source code:-

namespace Calculator
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }
        private void btnSubmit_Click(object sender, EventArgs e)
        {
            try
            {
                string first = txtFirst.Text;
                string second = txtSecond.Text;

                int a = Convert.ToInt32(first);
                int b = Convert.ToInt32(second);

                if (a < 0 || b < 0) throw new InvalidOperationException("Entered number must be non-negative.");

                if (cbxOperator.SelectedIndex == 0)
                {
                    string c = Convert.ToString(a + b);

                    txtResult.Text = c;

                    String aString = Convert.ToString(a);
                    String bString = Convert.ToString(b);

                    textOnHIstory(aString, bString, c, cbxOperator.SelectedIndex);
                }

                else if (cbxOperator.SelectedIndex == 1)
                {

                    string c = Convert.ToString(a - b);

                    txtResult.Text = c;

                    String aString = Convert.ToString(a);
                    String bString = Convert.ToString(b);

                    textOnHIstory(aString, bString, c, cbxOperator.SelectedIndex);
                }
                else if (cbxOperator.SelectedIndex == 2)
                {

                    string c = Convert.ToString(a * b);

                    txtResult.Text = c;

                    String aString = Convert.ToString(a);
                    String bString = Convert.ToString(b);

                    textOnHIstory(aString, bString, c, cbxOperator.SelectedIndex);
                }
                else
                {
                        decimal aDec = Convert.ToDecimal(first);
                        decimal bDec = Convert.ToDecimal(second);

                        string c = Convert.ToString(aDec / bDec);

                        txtResult.Text = c;

                        String aString = Convert.ToString(a);
                        String bString = Convert.ToString(b);

                        textOnHIstory(aString, bString, c, cbxOperator.SelectedIndex);
                }
            } catch (FormatException) {lblError.Text = "Error: Please enter a valid number";} 
            catch (InvalidOperationException ex) { lblError.Text = $"Error : {ex.Message}";}
            catch(DivideByZeroException) { lblError.Text = "Error: Cannot divide by zero"; }
            catch (Exception ex) { lblError.Text = $"Error : {ex.Message}"; } 
        }

        private void textOnHIstory(String num1, String num2, string num3, int ops)
        {
            switch (ops)
            {
                case 0:
                    txtHistory.AppendText(num1 + " + " + num2 + " = " + num3 + Environment.NewLine);

                    break;
                case 1:
                    txtHistory.AppendText(num1 + " - " + num2 + " = " + num3 + Environment.NewLine);
                    break;
                case 2:
                    txtHistory.AppendText(num1 + " * " + num2 + " = " + num3 + Environment.NewLine);
                    break;
                case 3:
                    txtHistory.AppendText(num1 + " / " + num2 + " = " + num3 + Environment.NewLine);
                    break;
                default:
                    MessageBox.Show("An error has occured at the case statement");
                    break;
            }

        }

        private void exitToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Environment.Exit(0);
        }

        private void clearToolStripMenuItem_Click(object sender, EventArgs e)
        {
            txtHistory.Clear();
        }

        
    }
}

